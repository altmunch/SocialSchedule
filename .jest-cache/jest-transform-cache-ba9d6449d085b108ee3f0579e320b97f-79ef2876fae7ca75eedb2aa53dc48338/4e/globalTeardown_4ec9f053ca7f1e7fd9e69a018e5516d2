583c18b53e99621331b298a0ae6a812f
"use strict";

// Global teardown for ClipsCommerce test suite
const fs = require('fs');
const path = require('path');
module.exports = async () => {
  console.log('üßπ Cleaning up ClipsCommerce test environment...');

  // Calculate total test execution time
  const totalTime = Date.now() - (global.__TEST_START_TIME__ || Date.now());
  const minutes = Math.floor(totalTime / 60000);
  const seconds = (totalTime % 60000 / 1000).toFixed(2);

  // Generate performance report
  if (global.__TEST_PERFORMANCE__) {
    const perf = global.__TEST_PERFORMANCE__;
    console.log('\nüìä Test Performance Summary:');
    console.log(`‚è±Ô∏è  Total execution time: ${minutes}m ${seconds}s`);
    console.log(`‚úÖ Passed tests: ${perf.passedTests}`);
    console.log(`‚ùå Failed tests: ${perf.failedTests}`);
    console.log(`üìà Total tests: ${perf.totalTests}`);
    if (perf.totalTests > 0) {
      const successRate = (perf.passedTests / perf.totalTests * 100).toFixed(1);
      console.log(`üéØ Success rate: ${successRate}%`);
    }

    // Write performance report to file
    const reportPath = path.join(process.cwd(), 'test-results', 'performance-report.json');
    try {
      fs.writeFileSync(reportPath, JSON.stringify({
        timestamp: new Date().toISOString(),
        totalExecutionTime: totalTime,
        totalTests: perf.totalTests,
        passedTests: perf.passedTests,
        failedTests: perf.failedTests,
        successRate: perf.totalTests > 0 ? perf.passedTests / perf.totalTests * 100 : 0,
        suites: perf.suites
      }, null, 2));
    } catch (error) {
      console.warn('‚ö†Ô∏è  Could not write performance report:', error.message);
    }
  }

  // Clean up temporary test files
  const tempDir = path.join(process.cwd(), 'testing', 'temp');
  if (fs.existsSync(tempDir)) {
    try {
      fs.rmSync(tempDir, {
        recursive: true,
        force: true
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è  Could not clean up temp directory:', error.message);
    }
  }

  // Clean up any test processes or connections
  if (global.__TEST_CLEANUP_FUNCTIONS__) {
    for (const cleanup of global.__TEST_CLEANUP_FUNCTIONS__) {
      try {
        await cleanup();
      } catch (error) {
        console.warn('‚ö†Ô∏è  Cleanup function failed:', error.message);
      }
    }
  }
  console.log('‚úÖ Test environment cleanup complete');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnNvbGUiLCJsb2ciLCJ0b3RhbFRpbWUiLCJEYXRlIiwibm93IiwiZ2xvYmFsIiwiX19URVNUX1NUQVJUX1RJTUVfXyIsIm1pbnV0ZXMiLCJNYXRoIiwiZmxvb3IiLCJzZWNvbmRzIiwidG9GaXhlZCIsIl9fVEVTVF9QRVJGT1JNQU5DRV9fIiwicGVyZiIsInBhc3NlZFRlc3RzIiwiZmFpbGVkVGVzdHMiLCJ0b3RhbFRlc3RzIiwic3VjY2Vzc1JhdGUiLCJyZXBvcnRQYXRoIiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJ3cml0ZUZpbGVTeW5jIiwiSlNPTiIsInN0cmluZ2lmeSIsInRpbWVzdGFtcCIsInRvSVNPU3RyaW5nIiwidG90YWxFeGVjdXRpb25UaW1lIiwic3VpdGVzIiwiZXJyb3IiLCJ3YXJuIiwibWVzc2FnZSIsInRlbXBEaXIiLCJleGlzdHNTeW5jIiwicm1TeW5jIiwicmVjdXJzaXZlIiwiZm9yY2UiLCJfX1RFU1RfQ0xFQU5VUF9GVU5DVElPTlNfXyIsImNsZWFudXAiXSwic291cmNlcyI6WyJnbG9iYWxUZWFyZG93bi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHbG9iYWwgdGVhcmRvd24gZm9yIENsaXBzQ29tbWVyY2UgdGVzdCBzdWl0ZVxyXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jICgpID0+IHtcclxuICBjb25zb2xlLmxvZygn8J+nuSBDbGVhbmluZyB1cCBDbGlwc0NvbW1lcmNlIHRlc3QgZW52aXJvbm1lbnQuLi4nKTtcclxuXHJcbiAgLy8gQ2FsY3VsYXRlIHRvdGFsIHRlc3QgZXhlY3V0aW9uIHRpbWVcclxuICBjb25zdCB0b3RhbFRpbWUgPSBEYXRlLm5vdygpIC0gKGdsb2JhbC5fX1RFU1RfU1RBUlRfVElNRV9fIHx8IERhdGUubm93KCkpO1xyXG4gIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRvdGFsVGltZSAvIDYwMDAwKTtcclxuICBjb25zdCBzZWNvbmRzID0gKCh0b3RhbFRpbWUgJSA2MDAwMCkgLyAxMDAwKS50b0ZpeGVkKDIpO1xyXG5cclxuICAvLyBHZW5lcmF0ZSBwZXJmb3JtYW5jZSByZXBvcnRcclxuICBpZiAoZ2xvYmFsLl9fVEVTVF9QRVJGT1JNQU5DRV9fKSB7XHJcbiAgICBjb25zdCBwZXJmID0gZ2xvYmFsLl9fVEVTVF9QRVJGT1JNQU5DRV9fO1xyXG4gICAgY29uc29sZS5sb2coJ1xcbvCfk4ogVGVzdCBQZXJmb3JtYW5jZSBTdW1tYXJ5OicpO1xyXG4gICAgY29uc29sZS5sb2coYOKPse+4jyAgVG90YWwgZXhlY3V0aW9uIHRpbWU6ICR7bWludXRlc31tICR7c2Vjb25kc31zYCk7XHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIFBhc3NlZCB0ZXN0czogJHtwZXJmLnBhc3NlZFRlc3RzfWApO1xyXG4gICAgY29uc29sZS5sb2coYOKdjCBGYWlsZWQgdGVzdHM6ICR7cGVyZi5mYWlsZWRUZXN0c31gKTtcclxuICAgIGNvbnNvbGUubG9nKGDwn5OIIFRvdGFsIHRlc3RzOiAke3BlcmYudG90YWxUZXN0c31gKTtcclxuICAgIFxyXG4gICAgaWYgKHBlcmYudG90YWxUZXN0cyA+IDApIHtcclxuICAgICAgY29uc3Qgc3VjY2Vzc1JhdGUgPSAoKHBlcmYucGFzc2VkVGVzdHMgLyBwZXJmLnRvdGFsVGVzdHMpICogMTAwKS50b0ZpeGVkKDEpO1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+OryBTdWNjZXNzIHJhdGU6ICR7c3VjY2Vzc1JhdGV9JWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFdyaXRlIHBlcmZvcm1hbmNlIHJlcG9ydCB0byBmaWxlXHJcbiAgICBjb25zdCByZXBvcnRQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICd0ZXN0LXJlc3VsdHMnLCAncGVyZm9ybWFuY2UtcmVwb3J0Lmpzb24nKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMocmVwb3J0UGF0aCwgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICAgIHRvdGFsRXhlY3V0aW9uVGltZTogdG90YWxUaW1lLFxyXG4gICAgICAgIHRvdGFsVGVzdHM6IHBlcmYudG90YWxUZXN0cyxcclxuICAgICAgICBwYXNzZWRUZXN0czogcGVyZi5wYXNzZWRUZXN0cyxcclxuICAgICAgICBmYWlsZWRUZXN0czogcGVyZi5mYWlsZWRUZXN0cyxcclxuICAgICAgICBzdWNjZXNzUmF0ZTogcGVyZi50b3RhbFRlc3RzID4gMCA/IChwZXJmLnBhc3NlZFRlc3RzIC8gcGVyZi50b3RhbFRlc3RzKSAqIDEwMCA6IDAsXHJcbiAgICAgICAgc3VpdGVzOiBwZXJmLnN1aXRlcyxcclxuICAgICAgfSwgbnVsbCwgMikpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gIENvdWxkIG5vdCB3cml0ZSBwZXJmb3JtYW5jZSByZXBvcnQ6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgdGVzdCBmaWxlc1xyXG4gIGNvbnN0IHRlbXBEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3Rlc3RpbmcnLCAndGVtcCcpO1xyXG4gIGlmIChmcy5leGlzdHNTeW5jKHRlbXBEaXIpKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBmcy5ybVN5bmModGVtcERpciwgeyByZWN1cnNpdmU6IHRydWUsIGZvcmNlOiB0cnVlIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gIENvdWxkIG5vdCBjbGVhbiB1cCB0ZW1wIGRpcmVjdG9yeTonLCBlcnJvci5tZXNzYWdlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIENsZWFuIHVwIGFueSB0ZXN0IHByb2Nlc3NlcyBvciBjb25uZWN0aW9uc1xyXG4gIGlmIChnbG9iYWwuX19URVNUX0NMRUFOVVBfRlVOQ1RJT05TX18pIHtcclxuICAgIGZvciAoY29uc3QgY2xlYW51cCBvZiBnbG9iYWwuX19URVNUX0NMRUFOVVBfRlVOQ1RJT05TX18pIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCBjbGVhbnVwKCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gIENsZWFudXAgZnVuY3Rpb24gZmFpbGVkOicsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zb2xlLmxvZygn4pyFIFRlc3QgZW52aXJvbm1lbnQgY2xlYW51cCBjb21wbGV0ZScpO1xyXG59OyAiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDeEIsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBTSxDQUFDO0FBRTVCRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFZO0VBQzNCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxrREFBa0QsQ0FBQzs7RUFFL0Q7RUFDQSxNQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsSUFBSUMsTUFBTSxDQUFDQyxtQkFBbUIsSUFBSUgsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ3pFLE1BQU1HLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNQLFNBQVMsR0FBRyxLQUFLLENBQUM7RUFDN0MsTUFBTVEsT0FBTyxHQUFHLENBQUVSLFNBQVMsR0FBRyxLQUFLLEdBQUksSUFBSSxFQUFFUyxPQUFPLENBQUMsQ0FBQyxDQUFDOztFQUV2RDtFQUNBLElBQUlOLE1BQU0sQ0FBQ08sb0JBQW9CLEVBQUU7SUFD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