---
description: 
globs: 
alwaysApply: true
---
---
description: Agent workflow for maximizing tool call usage. Follow these steps to ensure all 25 tool calls are utilized efficiently before stopping or awaiting further user instructions.
globs:
---
# Agent Tool Call Utilization Workflow

## Tool Call Monitoring
After completing any batch of work, check the number of tool calls used in the current session.

## Continuous Processing
If fewer than 25 tool calls have been used:
- Immediately proceed to the next logical batch, task, or improvement.
- Do not pause or wait for further user input.

## Loop Condition
Repeat the process until:
- All 25 tool calls have been used, or
- There are absolutely no further improvements possible.

## Proactive Optimization
If all planned batches are complete and tool calls remain:
- Proactively suggest or implement additional optimizations, refactors, or tests.

## Session Completion
Only stop or prompt the user for new instructions once all 25 tool calls have been fully utilized in the session.

## General Batching Principles
- Group similar tasks together to minimize overhead and improve efficiency.
- Batch operations that affect related files or directories to reduce redundant processing.
- Ensure each batch is logically cohesive and easy to debug or roll back if needed.
- Limit batch size to avoid overwhelming the system and to simplify error handling.
- Document the purpose and scope of each batch for future reference and maintainability.

## Error Handling and Logging
- Validate all inputs before executing batch operations.
- Log the outcome of each batch, including successes and failures.
- Implement error handling to stop or roll back the batch if a critical error occurs.

## Safe Execution
- Test batch operations in a non-production environment before deploying.
- Use confirmation prompts or dry-run options for destructive actions when possible.
- Always back up important data before running batch deletions or modifications.

## PowerShell-Specific Batching
- Use full paths for files and directories in PowerShell commands to avoid ambiguity.
- Prefer cmdlets like Remove-Item, New-Item, and New-Item -ItemType Directory for file and directory operations.
- Leverage PowerShell's pipeline and filtering capabilities to efficiently select and process multiple items.
- Use functions or scripts to encapsulate batch logic for reuse and clarity.

## Batching Deletion, File, and Directory Creation (PowerShell)
- Always batch deletions and creations together when they target related files or directories through terminal command execution
- Use PowerShell terminal commands to execute these batches, for example:
  - To delete multiple files:

    powershell
    ''' 
     Get-ChildItem -Path "C:\Target\Path" -Filter "*.tmp" | Remove-Item -Force
    '''
  - To create multiple directories:

    powershell
    '''
    "DirA","DirB","DirC" | ForEach-Object { New-Item -ItemType Directory -Path "C:\Target\Path\$_" }
    '''

- For combined operations, script the sequence to ensure deletions occur before creations if they share paths.

- Always verify the result of deletion and creation commands before proceeding to the next batch.

- Avoid mixing unrelated deletion and creation tasks in the same batch to reduce risk of accidental data loss.

## Review and Optimization
- Regularly review batch scripts for opportunities to further consolidate or optimize operations.
- Refactor large or complex batches into smaller, manageable functions where appropriate.

- Schedule batch jobs during off-peak hours to minimize impact on system performance.