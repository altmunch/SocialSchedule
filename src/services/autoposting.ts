import { AutoPostingScheduler } from '../app/workflows/autoposting/AutoPostingScheduler';
import { ContentQueue } from '../app/workflows/autoposting/ContentQueue';

/**
 * Request payload for scheduling a post.
 */
export interface AutoPostRequest {
  /**
   * Arbitrary content payload understood by individual PlatformPoster implementations.
   */
  content: any;
  /**
   * Target platforms to post to.
   */
  platforms: Array<'tiktok' | 'instagram' | 'youtube'>;
  /**
   * Desired publish time. Defaults to now if omitted.
   */
  scheduleTime?: Date;
}

const scheduler = new AutoPostingScheduler();

/**
 * Schedules content for autoposting and immediately triggers queue processing.
 * Returns the identifier generated by ContentQueue so that callers can poll
 * for status via other workflow utilities (DashboardAPI / Queue APIs, etc.).
 */
export const autopost = async (
  request: AutoPostRequest,
): Promise<{ id: string }> => {
  const { content, platforms, scheduleTime = new Date() } = request;

  const id = scheduler.getQueue().addToQueue({
    content,
    platforms,
    metadata: {
      caption: (content && content.caption) || undefined,
      hashtags: (content && content.hashtags) || undefined,
      scheduledTime: scheduleTime,
      status: 'pending',
    },
  });

  // Fire-and-forget background processing; the AutoPostingScheduler already
  // handles retries, monitoring, and error reporting internally.
  // We do NOT await to keep API latency low.
  /* eslint-disable @typescript-eslint/no-floating-promises */
  scheduler.processQueue();
  /* eslint-enable @typescript-eslint/no-floating-promises */

  return { id };
}; 